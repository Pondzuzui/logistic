<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</title>
    <style>
/* General Styles */
/* Body */
body {
    font-family: 'Sarabun', sans-serif;
    background: linear-gradient(to right, #2c3e50, #597496);
    margin: 0;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    min-height: 100vh;
}

/* ‡∏Å‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° */
.container {
    background: #ffffff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 90%;
    max-width: 1000px; /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î */
    text-align: left;
}

/* Header */
.header h3 {
    font-size: 24px;
    color: #333;
    margin-bottom: 20px;
    text-align: center;
}

/* Label */
label {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 8px;
    display: block;
}

/* Input Fields */
input[type="text"], input[type="number"], input[type="date"], input[type="hidden"] {
    width: 95%;
    padding: 10px;
    margin-bottom: 15px;
    background: #f0f4f8;
    border: 1px solid #333;
    border-radius: 4px;
    font-size: 14px;
}

/* Table Styles */
.table {
    width: 100%;
    margin-top: 20px;
    border-collapse: collapse;
}

.table th, .table td {
    padding: 12px;
    text-align: center;
    border: 1px solid #ddd;
}

.table th {
    background-color: #f0f4f8;
}

/* Buttons */
button {
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 4px;
    cursor: pointer;
    border: none;
}

.btn-search {
    background-color: #4CAF50;
    color: #fff;
}

.btn-search:hover {
    background-color: #45a049;
}

.btn-danger {
    background-color: #f44336;
    color: white;
}

.btn-danger:hover {
    background-color: #e53935;
}

.btn-success {
    background-color: #4CAF50;
    color: white;
}

.btn-success:hover {
    background-color: #45a049;
}

/* Google Maps iframe */
#mapFrame {
    border: 0;
    border-radius: 8px;
    width: 100%;
    height: 300px;
}

/* Checkbox Styles */
input[type="checkbox"] {
    margin-right: 10px;
}

/* Table Input Fields */
.form-control1 {
    width: 100%;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

/* Additional Styles */
.mb-3 {
    margin-bottom: 20px;
}

.text-dark {
    color: #333;
}
/* ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ label, input ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */
.lat-long-container {
    display: flex;
    align-items: center;
    gap: 10px; /* ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á input ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° */
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î input ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */
.lat-long-container input {
    flex: 1; /* ‡πÉ‡∏´‡πâ input ‡∏¢‡∏∑‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */
    padding: 10px;
    border: 1px solid #333;
    border-radius: 4px;
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ */
.lat-long-container .btn-custom {
    white-space: nowrap; /* ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà */
    padding: 10px 15px;
}
.btn-custom{
    background-color: #f39c12;
    color: #fff;
}
.btn-custom:hover {
    background-color: #e67e22;
}
.btn-custom:hover{
            background-color: #e74c3c;
            color: white;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
        }
/* ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
.form-control1 {
    width: 100%;
    padding: 8px;
    border-radius: 5px;
    border: 1px solid #ccc;
    font-size: 14px;
    text-align: center;
    background: #f9f9f9; /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô */
    transition: all 0.3s ease;
}

/* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏Å‡∏±‡∏™ */
.form-control1:focus {
    border-color: #4CAF50;
    box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
    background: #fff;
}
/* ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á checkbox ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ */
.checkbox-container {
    display: flex;
    align-items: center;
    justify-content: flex-end; /* ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ */
    gap: 15px; /* ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á checkbox ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° */
    margin-top: 10px;
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á checkbox */
.checkbox-container label {
    display: flex;
    align-items: center;
    font-size: 16px;
}

.insert-btn {
    background-color: #2196F3; /* ‡∏™‡∏µ‡∏ü‡πâ‡∏≤ */
    color: white; /* ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
    border: none;
}

.insert-btn:hover {
    background-color: #1976D2; /* ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏Æ‡πÄ‡∏ß‡∏≠‡∏£‡πå */
}
/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
textarea {
    width: 95%;
    padding: 10px;
    border: 1px solid #060505;
    border-radius: 4px;
    font-size: 14px;
    resize: vertical; /* ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥‡πÑ‡∏î‡πâ */
    min-height: 100px;
}
/* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
.table thead th {
    background: linear-gradient(to right, #2c3e50, #4b6584);
    color: white; /* ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ */
    font-size: 16px;
    padding: 10px;
    text-align: center;
}
/* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏•" */
#submitBill {
    background-color: #28a745; /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */
    color: white; /* ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
    padding: 15px 300px; /* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° */
    font-size: 18px; /* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå */
    border-radius: 5px; /* ‡∏°‡∏∏‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏á */
    border: none; /* ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏ö */
    cursor: pointer;
    margin-left: 15%;
    margin-top:10px ;
}


/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏Æ‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡πÄ‡∏≠‡∏≤‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ß‡∏≤‡∏á) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ */
#submitBill:hover {
    background-color: #218838; /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏° */
}


    </style>    
</head>
<body>
    <div class="container">
    <div class="header">
        <h3 class="text-dark">üîπ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ üîπ</h3>


        <form id="billForm">
            <input type="hidden" name="so_detail_id" value="{{ $so_detail_id }}">  <!-- ‡∏™‡πà‡∏á so_detail_id -->
        
            <label>SO ID:</label>
            <input type="text" id="so_id" name="so_id" value="{{ $so_id }}" readonly>
        
            <label>‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ :</label>
            <input type="text" id="sale_name" name="sale_name" value="{{ $sale_name }}" readonly>
        
            <label>‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏• :</label>
            <input type="text" id="emp_name" name="emp_name" value="{{ $emp_name }}" readonly>
        
            <label>‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ :</label>
            <input type="text" id="customer_id" name="customer_id" value="{{ $customer_id }}" readonly>
        
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó :</label>
            <input type="text" id="customer_name" name="customer_name" value="{{ $customer_name }}" readonly>
        
            <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ :</label>
            <input type="text" id="customer_tel" name="customer_tel" value="{{ $customer_tel }}" readonly>
        
            <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á :</label>
            <input type="text" id="customer_address" name="customer_address" value="{{ $customer_address }}" readonly>
        
            <label>‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î :</label>
            <input type="text" id="customer_la_long" name="customer_la_long" value="{{ $customer_la_long }}" readonly>
        
            <label>‡∏ß‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á</label>
            <input type="text" id="date_of_dali" name="date_of_dali" value="{{ \Carbon\Carbon::parse($date_of_dali)->format('d/m/Y') }}" readonly>
        
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                        <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                        <th>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($billItems as $item)
                        <tr>
                            <td><input type="text" class="form-control1" name="item_id[]" value="{{ $item->item_id }}" readonly></td>
                            <td><input type="text" class="form-control1" name="item_name[]" value="{{ $item->item_name }}" readonly></td>
                            <td><input type="number" class="form-control1 item_quantity" name="item_quantity[]" value="{{ $item->quantity }}"></td>
                            <td><input type="number" class="form-control1 item_unit_price" name="item_unit_price[]" value="{{ $item->unit_price }}" readonly></td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
        
            <label for="additional_notes">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
            <textarea id="additional_notes" name="additional_notes" rows="4" readonly></textarea>
        
            <button type="button" id="updateBill" class="btn btn-success"> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏¥‡∏•</button>
            <button type="button" id="deleteBill" class="btn btn-danger"> ‡∏•‡∏ö‡∏ö‡∏¥‡∏•</button>
        </form>

<script>
    document.getElementById('updateBill').addEventListener('click', async function () {
        const form = document.getElementById('billForm');
        const formData = new FormData(form);
        
        const so_detail_id = formData.get("so_detail_id");

        const items = [];
        document.querySelectorAll('.item_quantity').forEach((input, index) => {
            const item_id = form.querySelectorAll('[name="item_id[]"]')[index].value;
            const quantity = input.value;
            items.push({ item_id, quantity });
        });

        console.log("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", { so_detail_id, items });

        try {
            const response = await fetch('/update-bill', {
                method: 'POST', 
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ so_detail_id, items })
            });

            const result = await response.json();
            console.log("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", result);

            if (result.success) {
                alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                window.location.href = '/dashboard'; 
            } else {
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        }
    });

</script>


<script>
    document.getElementById('deleteBill').addEventListener('click', async function (event) {
        event.preventDefault();

        let soDetailId = "{{ $so_detail_id }}"; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ so_detail_id ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
        let confirmDelete = confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
        
        if (!confirmDelete) return;

        try {
            let response = await fetch(`/delete-bill/${soDetailId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token() }}',
                },
            });

            let data = await response.json();
            if (data.success) {
                alert(data.success);
                window.location.href = '/dashboard';
            } else {
                alert(data.error);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏¥‡∏•');
        }
    });
</script>


    {{-- function --}}
    <script>
                const selectAllCheckbox = document.querySelector('input[name="checkall"]');
                if (selectAllCheckbox) {
                    selectAllCheckbox.addEventListener('change', function() {
                        const checkboxes = document.querySelectorAll('input[type="checkbox"]:not([name="checkall"])');
                        checkboxes.forEach(checkbox => checkbox.checked = this.checked);
                    });
                }
        
                const tableBody = document.querySelector('table tbody');
                if (tableBody) {
                    tableBody.addEventListener('click', function(e) {
                        if (e.target.classList.contains('delete-btn')) {
                            var row = e.target.closest('tr');
                            row.remove();
                        }
                    });
                }
        
                const insertBtn = document.querySelector('.insert-btn');
                if (insertBtn) {
                    insertBtn.addEventListener('click', function() {
                        var newRow = document.createElement('tr');
                        newRow.innerHTML = `
                            <td><input type="checkbox" class="form-control1" name="status[]"></td>
                            <td><input type="text" class="form-control1" name="item_id[]"></td>
                            <td><input type="text" class="form-control1" name="item_name[]"></td>
                            <td>
                                <input type="number" class="form-control1 item_quantity" name="item_quantity[]" oninput="calculateTotal(this)">
                            </td>
                            <td>
                                <input type="number" class="form-control1 item_unit_price" name="item_unit_price[]" oninput="calculateTotal(this)">
                            </td>
                        
                            <td><button type="button" class="btn btn-danger delete-btn">‡∏•‡∏ö</button></td>
                        `;
                        tableBody.appendChild(newRow);
                    });
                    
                }
        
                    

        
            function openGoogleMaps() {
                const mapWindow = window.open(
                    "https://www.google.com/maps/@13.7563,100.5018,14z",
                    "Google Maps",
                    "width=800,height=600"
                );
            }
                function confirmSubmit(event) {
                event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ submit ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥

                // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                let confirmation = confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏•‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");

                if (confirmation) {
                // ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏ï‡∏Å‡∏•‡∏á
                let formData = new FormData(document.getElementById('billForm')); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°

                fetch('{{ route("insert.post") }}', { // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á insert.post
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRF-TOKEN': '{{ csrf_token() }}', // ‡∏™‡πà‡∏á CSRF Token
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.success); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        window.location.href = '/dashboard'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ dashboard
                    } else if (data.error) {
                        alert(data.error); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                    }
                })
                .catch((error) => {
                    console.error('Error:', error); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
                    alert('‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                });

                } else {
                // ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                alert("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏•.");
                }
                }


    </script>






</body>
</html>
